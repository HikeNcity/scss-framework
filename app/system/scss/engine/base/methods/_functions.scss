// color palette
@function cd-palette($palette, $hex-code, $opacity: null) {
	@if map-has-key($palette, $hex-code) {
		$color: map-get($palette, $hex-code);
		$opacity: if($opacity == null, opacity($color), $opacity);

		@if $opacity >= 0 and $opacity <=1 {
			@return rgba($color, $opacity);
		} @else {
			@error 'Opacity value `#{$opacity}` must range from 0-1.';
		}
	} @else {
		@error 'Unable to find a palette code: `#{$hex-code}`.';
	}
}

// property: z-index
@function cd-zIndex($key, $list: null) {
	$list: if($list == null, $cd-zIndex, $list);
	@if map-has-key($list, $key) {
		@return map-get($list, $key);
	} @else {
		@error 'Unable to find a z-index: `#{$key}`.';
	}
}

// property: font-family
@function cd-fontFamily($key, $list: null) {
	$list: if($list == null, $cd-fontFamily, $list);
	@if map-has-key($list, $key) {
		@return map-get($list, $key);
	} @else {
		@error 'Unable to find a font-family: `#{$key}`.';
	}
}

// property: font-size
@function cd-fontSize($key, $list: null) {
	$list: if($list == null, $cd-fontSize, $list);
	@if map-has-key($list, $key) {
		$value: map-get($list, $key);
		// px
		@if unit($value) == 'px' {
			@return #{($value/16px)}rem;
		}
		// rem
		@return $value;
	} @else {
		@error 'Unable to find a font-size: `#{$key}`.';
	}
}

// property: font-weight
@function cd-fontWeight($key, $list: null) {
	$list: if($list == null, $cd-fontWeight, $list);
	@if map-has-key($list, $key) {
		@return map-get($list, $key);
	} @else {
		@error 'Unable to find a font-weight: `#{$key}`.';
	}
}

// property: line-height
@function cd-lineHeight($key, $list: null) {
	$list: if($list == null, $cd-lineHeight, $list);
	@if map-has-key($list, $key) {
		@return map-get($list, $key);
	} @else {
		@error 'Unable to find a line-height: `#{$key}`.';
	}
}
